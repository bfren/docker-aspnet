#!/usr/bin/nu

use bf

# Download URLs for .NET and ASP.NET runtimes
const dotnet_url = "https://dotnetcli.azureedge.net/dotnet/Runtime/{v}/dotnet-runtime-{v}-linux-musl-{a}.tar.gz"
const aspnet_url = "https://dotnetcli.azureedge.net/dotnet/aspnetcore/Runtime/{v}/aspnetcore-runtime-{v}-linux-musl-{a}.tar.gz"

# Setup and install .NET runtime and ASP.NET
def main [] {
    # add www user
    bf user add www

    # get .NET version
    cd /tmp
    let revision = bf fs read DOTNET_REVISION
    bf build add "ASP.NET" $revision

    # handle preview versions - they come with build versions that we want to strip away
    # see https://dotnetcli.blob.core.windows.net/dotnet/checksums/9.0.0-rc.2-sha.txt
    bf write "Stripping away preview build versions."
    let dotnet_build = match ($revision | get_major) {
        "10" => "10.0.0-preview.3.25171.5"
        _ => $revision
    }
    let aspnet_build = match ($revision | get_major) {
        "10" => "10.0.0-preview.3.25172.1"
        _ => $revision
    }
    bf write $"Installing .NET v($revision)."

    # install dotnet dependencies
    let deps_common = [
        ca-certificates
        icu-libs
        krb5-libs
        libcrypto3
        libgcc
        libintl
        libssl3
        libstdc++
    ]
    let deps = match ($revision | get_major) {
        "9" => ($deps_common | append "zlib")
        _ => $deps_common
    }
    bf write "Installing .NET dependencies."
    bf pkg install $deps

    # get platform architecture
    let platform = bf build | get Platform
    let arch = match $platform {
        "linux/amd64" => "x64"
        "linux/arm/v7" => "arm"
        "linux/arm64" => "arm64"
        _ => { bf write error $"Unsupported platform: ($platform)" }
    }
    bf write $"Detected platform architecture is: ($arch)."

    # install .NET runtime
    bf write "Installing .NET runtime."
    let dotnet_file = download $dotnet_build $arch dotnet $dotnet_url
    let dotnet_dir = "/usr/share/dotnet"

    try {
        bf write $" .. extracting ($dotnet_file)."
        mkdir $dotnet_dir
        ^tar -oxzf $dotnet_file -C $dotnet_dir
        ^ln -s $"($dotnet_dir)/dotnet" /usr/bin/dotnet
    } catch {
        bf write error " .. error installing .NET runtime."
    }

    # install ASP.NET runtime
    bf write $"Installing ASP.NET runtime."
    let aspnet_file = download $aspnet_build $arch aspnet $aspnet_url
    let aspnet_dir = "shared/Microsoft.AspNetCore.App"

    try {
        bf write $" .. extracting ($aspnet_file)."
        ^tar -oxzf $aspnet_file -C $dotnet_dir $"./($aspnet_dir)"
    }

    if ($"($dotnet_dir)/($aspnet_dir)/($aspnet_build)" | bf fs is_not_dir) {
        bf write error " .. error installing ASP.NET runtime."
    }

    # save ASP.NET directory
    bf env set ASPNET_RUNTIME $"($dotnet_dir)/($aspnet_dir)"

    # add bf-aspnet module to config
    bf config use bf-aspnet
}

# Get the major version from a revision
def get_major []: string -> string { $in | split row "." | first }

# Download and verify a runtime for .NET or ASP.NET
def download [
    version: string     # Runtime verison
    arch : string       # Platform architecture
    kind: string        # Runtime kind - 'dotnet' or 'aspnet'
    url_format: string  # URL format - see constants at top of module
] {
    # build the URL and filename
    let url = $url_format | str replace --all "{v}" $version | str replace --all "{a}" $arch
    let filename = $"($version | get_major)-($arch)-($kind)"
    let filename_with_ext = $"($filename).tar.gz"

    # download the requested runtime
    bf write $" .. downloading ($url)."
    http get $url | save $filename_with_ext

    # get the relevant hash
    let hash = match $filename {
        "6-arm-dotnet" => "3dd539816405ec2d818f611a7cb98fe4069960e8ac4664ccca04ff8b2e0679387b0a3f2cc5045bef95657626ac1045bedc4e502da304ee54678afbbe83dcc3b3"
        "6-arm64-dotnet" => "0830715511ab602242487c5fae0dc7a5b75e0c9d7705e624181ec13cc4726a06d7935df952aeddda0dc2c46db95ab14af9d8229a2302b1e6d2fd7e892b42267b"
        "6-x64-dotnet" => "56c2161c52901706fd769d2c9168cff5959576bd1a72d89f7c27858f467f59970624ea9a0559368462bc178e7c9ef7d86d0fda08c7dbdb72dd3e9084280823eb"
        "7-arm-dotnet" => "25ccc373d1c4c0eb741e048c6fd48366310b36ac6f068c50f6bc01342a000464144e8457e7e1b6ccf6d99544d4914022efcb824e75636517bbf61c94852cdd74"
        "7-arm64-dotnet" => "552ca73467f8043d351c20d71df95ba963b32e8c75706df6f5d3fce525f3efdf1314df296c44fbedad5575782e37633998a79b2c23f7f7420f814ee2488f30a2"
        "7-x64-dotnet" => "31b9da08d633cd0028eb08c36ee2c5c3cb1be6d3c5e010c85ae291496fe5e818b5be59f5d47aff86ed939c260f762e57ff06934a4d0954376935b1adc799f1bf"
        "8-arm-dotnet" => "4a72cb3e0a3994ac9ad8c18be64a6189d56221274cff31da74bf0b8aba02d68260f056a5734773e4c4a34851fe42e614e7720eb5197328f5e76076f850c576f3"
        "8-arm64-dotnet" => "a52a3d2518301fd6571a16620b8802022da775acd70d78195bd75ed4729c0d21fa4f1b5b86869c11fb9f3bdea878deabc3c9d09ea31d8d2b2e43bc22e3b76f3d"
        "8-x64-dotnet" => "424fb3f807c809271752f79189abee1e6cf9f2326e1cbb5866cbc030d6b6deae98a3913fb5ecb5f944f8c13869fa4c53baa19ddeba1c2b07f9ae72739f061a74"
        "9-arm-dotnet" => "152315bad4db61f6de20e47103e0804f64e9dbc3adbb8cf874c3e979a0d19b4b26f5fac07f1cd224a8881f4afdedb3c244f970a7d647eae1aa44ac2604c43526"
        "9-arm64-dotnet" => "f91cb422005c64c92c804b02670526492446cbe368633579dbf670a4a6d679c74ef012b8ee73fea672ccd85f0aa44c7164ed20876772af15052fa7447c10e255"
        "9-x64-dotnet" => "a5e597643deae25a998759bd9b0eb19b933f13a36b1d7f2e4696068a9a9e0324bfd43490e8dec222168b8c063b6827fbee80181e4700bb4712550acc1801048c"
        "10-arm-dotnet" => "978895a7639f0c1b0860eb3c293226553e4eaeea5ba7039aa5df0eb57284657a2255e601c65a40e25d5248383884b05cd401d3472cf60934a65726007cc1de4a"
        "10-arm64-dotnet" => "7532ab4d168ad7ca86fdca46db3f9447b9ece86688fdc011d4597e4a68aedaa4b3af0079c2f92f4ab2a546e7ab6ecf525dc69ef4c11d032c84c29738c7a62ada"
        "10-x64-dotnet" => "26914a60143fa394d1f238d4da335ae5869696899b31da9b1f537df96e2f4b1862cdab11ea2e550dae9a19817ee3679aaa0e4db9656cebe5143b8513090dfee7"
        "6-arm-aspnet" => "0f772735acac7258c2af4a67c881d5afac2f841f9ab691a06ba1e34abd81d5831d09fe8886e025f7d1fbe84a1e93415fb8e35511c4bb988dd94cb823c18d0078"
        "6-arm64-aspnet" => "cf3dbc687acd27220560baf52d52dd42f4773ddd642487ae84e7a298ac30d9640af86cd0c5ee28ecd0364b35892194dbdfd1df302451367d7472c3bd00202f26"
        "6-x64-aspnet" => "18d33df408b7e21fcbda8e1c6d67e745a374062d195467a826032da679784fb30b55fdad2de75497dd0e917b213d788ceb3f1b3481276e26e103f991c7553a93"
        "7-arm-aspnet" => "ca84e0eff052d45b7fa9afd8a68f1d56264155b507881105d206969922057bf332895a3c3a2a1702648e46712f022574d93ae187c8fd2610f8392909568abf56"
        "7-arm64-aspnet" => "65406e1714a3117daa342b3fd0dbcd5c3214315611eacbbd8580827f69a07a9480530320ba40692a3d6dbff832d929a1420079f1db30ca3fd67a6fd035149d04"
        "7-x64-aspnet" => "a80f31193af70d556e8d026d39d79863c8389b065fe0778e7b4360f7d1f6d36503ba52736c40e74a716c3c30500b185816ed60d79b06ae295754b67374a1fa45"
        "8-arm-aspnet" => "fd6890890dd0fccd13d817011e536214dded1b0d18eacd346954751a4642e0d6e5bcdcfaa485964085f5700f41ca009bd94f948ffce705a21ffbcc419ca2daa3"
        "8-arm64-aspnet" => "025b2cc23591a1475755fc3b321e7d05aacda34c5616170eb47e4842bd978a4636d47d87c0666dadf7592ffd82db59427bcef953a0a5d1842d8c321d01c01e6e"
        "8-x64-aspnet" => "af6f6d7f84b404f44f2f3322407b68f3962ddb06a0ea57db7713cef21980ad379919a2035c60aa7b028d0720381f5965474b64446c9b25a9e58289631e04c15a"
        "9-arm-aspnet" => "11cea0b91ae542bc4d2fc451247595071eeb01f801d3305f9c9ccda7c04b4b1c327ee75a21452ac1b584a50a639e6d622272fc7ab9cbb744a8bb691b45baf2c2"
        "9-arm64-aspnet" => "67fe12c34c4859dd8c50b57145e2fefbb929dbe2a729a5a8bfb1a53441689f68295cff4d93194ff3b9611212f13674c70e142b2cfe3bf6a57710fd4206722898"
        "9-x64-aspnet" => "89d8a05c65f886e1708dbfa4ea97baaf64029eca2aee9b883c9e516129058c5636c313554f05bdeb52801339ab4e326ebeb708e14dcea75e3cd70ddbc5f81caf"
        "10-arm-aspnet" => "f1b06e651590ba866dc312da08a85b4b3e4c8d71a1dce9d5719e1e86f5d7ad646913dead9552d74eeedd7cb70a349d10fd54c77dbc9ad09b34327f739fc45092"
        "10-arm64-aspnet" => "8decf0ecf5dab0c1d09832c3419c08cb6ba027fc1713f0a17ab7a61b89369867dafabaf1704340e0db81753b65aa63e131b75969fe7d7ee58e01c8854c6cba6b"
        "10-x64-aspnet" => "6fc6432cda03745448e4152c06d737bd8bfa4356e2b38a0b48619f2b6ff75ff1d1f66f72449c643224ca7f04c505efe1af35e0e66dd311e5edfb34ac6599e58d"
        _ => { bf write error $"Unsupported .NET download: ($filename)." }
    }

    # verify downloaded file
    bf write $" .. verifying ($filename) download." install/download
    { $"($hash)  ($filename_with_ext)" | ^sha512sum -c - } | bf handle -f {|code, err|
        bf write error $" .. checksum did not match for ($filename)." install/download
    } install/download

    # return filename with extension
    $filename_with_ext
}
