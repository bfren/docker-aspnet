#!/usr/bin/nu

use bf

# Download URLs for .NET and ASP.NET runtimes
const dotnet_url = "https://dotnetcli.azureedge.net/dotnet/Runtime/{v}/dotnet-runtime-{v}-linux-musl-{a}.tar.gz"
const aspnet_url = "https://dotnetcli.azureedge.net/dotnet/aspnetcore/Runtime/{v}/aspnetcore-runtime-{v}-linux-musl-{a}.tar.gz"

# Setup and install .NET runtime and ASP.NET
def main [] {
    # add www user
    bf user add www

    # get .NET version
    cd /tmp
    let revision = bf fs read DOTNET_REVISION
    bf build add "ASP.NET" $revision

    # handle preview versions - they come with build versions that we want to strip away
    # see https://dotnetcli.blob.core.windows.net/dotnet/checksums/9.0.0-rc.2-sha.txt
    bf write "Stripping away preview build versions."
    let dotnet_build = match ($revision | get_major) {
        "10" => "10.0.0-preview.2.25163.2"
        _ => $revision
    }
    let aspnet_build = match ($revision | get_major) {
        "10" => "10.0.0-preview.2.25164.1-"
        _ => $revision
    }
    bf write $"Installing .NET v($revision)."

    # install dotnet dependencies
    let deps_common = [
        ca-certificates
        icu-libs
        krb5-libs
        libcrypto3
        libgcc
        libintl
        libssl3
        libstdc++
    ]
    let deps = match ($revision | get_major) {
        "9" => ($deps_common | append "zlib")
        _ => $deps_common
    }
    bf write "Installing .NET dependencies."
    bf pkg install $deps

    # get platform architecture
    let platform = bf build | get Platform
    let arch = match $platform {
        "linux/amd64" => "x64"
        "linux/arm/v7" => "arm"
        "linux/arm64" => "arm64"
        _ => { bf write error $"Unsupported platform: ($platform)" }
    }
    bf write $"Detected platform architecture is: ($arch)."

    # install .NET runtime
    bf write "Installing .NET runtime."
    let dotnet_file = download $dotnet_build $arch dotnet $dotnet_url
    let dotnet_dir = "/usr/share/dotnet"

    try {
        bf write $" .. extracting ($dotnet_file)."
        mkdir $dotnet_dir
        ^tar -oxzf $dotnet_file -C $dotnet_dir
        ^ln -s $"($dotnet_dir)/dotnet" /usr/bin/dotnet
    } catch {
        bf write error " .. error installing .NET runtime."
    }

    # install ASP.NET runtime
    bf write $"Installing ASP.NET runtime."
    let aspnet_file = download $aspnet_build $arch aspnet $aspnet_url
    let aspnet_dir = "shared/Microsoft.AspNetCore.App"

    try {
        bf write $" .. extracting ($aspnet_file)."
        ^tar -oxzf $aspnet_file -C $dotnet_dir $"./($aspnet_dir)"
    }

    if ($"($dotnet_dir)/($aspnet_dir)/($aspnet_build)" | bf fs is_not_dir) {
        bf write error " .. error installing ASP.NET runtime."
    }

    # save ASP.NET directory
    bf env set ASPNET_RUNTIME $"($dotnet_dir)/($aspnet_dir)"

    # add bf-aspnet module to config
    bf config use bf-aspnet
}

# Get the major version from a revision
def get_major []: string -> string { $in | split row "." | first }

# Download and verify a runtime for .NET or ASP.NET
def download [
    version: string     # Runtime verison
    arch : string       # Platform architecture
    kind: string        # Runtime kind - 'dotnet' or 'aspnet'
    url_format: string  # URL format - see constants at top of module
] {
    # build the URL and filename
    let url = $url_format | str replace --all "{v}" $version | str replace --all "{a}" $arch
    let filename = $"($version | get_major)-($arch)-($kind)"
    let filename_with_ext = $"($filename).tar.gz"

    # download the requested runtime
    bf write $" .. downloading ($url)."
    http get $url | save $filename_with_ext

    # get the relevant hash
    let hash = match $filename {
        "6-arm-dotnet" => "3dd539816405ec2d818f611a7cb98fe4069960e8ac4664ccca04ff8b2e0679387b0a3f2cc5045bef95657626ac1045bedc4e502da304ee54678afbbe83dcc3b3"
        "6-arm64-dotnet" => "0830715511ab602242487c5fae0dc7a5b75e0c9d7705e624181ec13cc4726a06d7935df952aeddda0dc2c46db95ab14af9d8229a2302b1e6d2fd7e892b42267b"
        "6-x64-dotnet" => "56c2161c52901706fd769d2c9168cff5959576bd1a72d89f7c27858f467f59970624ea9a0559368462bc178e7c9ef7d86d0fda08c7dbdb72dd3e9084280823eb"
        "7-arm-dotnet" => "25ccc373d1c4c0eb741e048c6fd48366310b36ac6f068c50f6bc01342a000464144e8457e7e1b6ccf6d99544d4914022efcb824e75636517bbf61c94852cdd74"
        "7-arm64-dotnet" => "552ca73467f8043d351c20d71df95ba963b32e8c75706df6f5d3fce525f3efdf1314df296c44fbedad5575782e37633998a79b2c23f7f7420f814ee2488f30a2"
        "7-x64-dotnet" => "31b9da08d633cd0028eb08c36ee2c5c3cb1be6d3c5e010c85ae291496fe5e818b5be59f5d47aff86ed939c260f762e57ff06934a4d0954376935b1adc799f1bf"
        "8-arm-dotnet" => "4f071b8e53c8046037bdc945c8dd61955df074820e8e7bc3922a97fe1bcc9574635c9a0aab643d5d4d5b8928de12d14435bd6eb097c189bd850d4f704dbbdadc"
        "8-arm64-dotnet" => "b428b6d54414af5147bb6a806f978945540b1adb36a5d432d94dedeb798e2cffa279cdf327a5464357743b526700487aef7e6b118ceecd9d4b623400b04ae5db"
        "8-x64-dotnet" => "f9ddf59984ea9692a624ca1e7af2783693c564979eaf460dd4fbb3b72070faada1ee36a20895c492c886f061abf0dbb8327b1f8e0581cbe4991666f092b09789"
        "9-arm-dotnet" => "bd807c994b02aa0c97e001492c16146894f6aa1fdef12d0979ffb0c84d809cdf955fd351016bb59d5098ec945fc3cce7958a6fedcd0e301ef28159700e380278"
        "9-arm64-dotnet" => "2385114169e32b29b3a13b275a441af1edbb4c14ebed52ff8f45f11ac8a571efa2984be2ef91e38e670038c8e29db8c585ff12d1e05502f4120e4dd05e98b72c"
        "9-x64-dotnet" => "8533a061f4fad61135269ae7987d9bdc8000cbc4999e00392f0e9d234d40e20a4f4e753dd5724373772349a896f2a84e3ba86e876d81a9bf068888e421afb13f"
        "10-arm-dotnet" => "1298d446e8cb27768dbdd512576cdd6526dad29a7676ee748bc92fa64430760cdbe817ca6c62c4872ab2008b845580d4709571a59c6c3f332650acaee8643546"
        "10-arm64-dotnet" => "63cc61a5bd53b1327fd67d57b04841c0a8e7950b5d531fc7890352e56aa2a09b083a808cc8b9be1afd424264371d51fc3329791fdc0479888ceefadda52e2723"
        "10-x64-dotnet" => "d91bfb5839b30377d09849511c8668230be51fae0d05e07d761297da40c994d800de5ce6fc5f7307cbdf5cf6e7fa7dd720ecab8354ec9436c662cd4fe14851dd"
        "6-arm-aspnet" => "0f772735acac7258c2af4a67c881d5afac2f841f9ab691a06ba1e34abd81d5831d09fe8886e025f7d1fbe84a1e93415fb8e35511c4bb988dd94cb823c18d0078"
        "6-arm64-aspnet" => "cf3dbc687acd27220560baf52d52dd42f4773ddd642487ae84e7a298ac30d9640af86cd0c5ee28ecd0364b35892194dbdfd1df302451367d7472c3bd00202f26"
        "6-x64-aspnet" => "18d33df408b7e21fcbda8e1c6d67e745a374062d195467a826032da679784fb30b55fdad2de75497dd0e917b213d788ceb3f1b3481276e26e103f991c7553a93"
        "7-arm-aspnet" => "ca84e0eff052d45b7fa9afd8a68f1d56264155b507881105d206969922057bf332895a3c3a2a1702648e46712f022574d93ae187c8fd2610f8392909568abf56"
        "7-arm64-aspnet" => "65406e1714a3117daa342b3fd0dbcd5c3214315611eacbbd8580827f69a07a9480530320ba40692a3d6dbff832d929a1420079f1db30ca3fd67a6fd035149d04"
        "7-x64-aspnet" => "a80f31193af70d556e8d026d39d79863c8389b065fe0778e7b4360f7d1f6d36503ba52736c40e74a716c3c30500b185816ed60d79b06ae295754b67374a1fa45"
        "8-arm-aspnet" => "e4f84b7072c70e8e76a8ceee0a0e4dff7b9e46caa0ee4e93882d15c0bff0e5583de16e181c26880becece00480785df5799682028d7908ab3f2a694aa3145694"
        "8-arm64-aspnet" => "dbc6dbd4bbae6137bb08e115dd2ad675c5373c3d573023cef0bbdc05000e4cadf2f31b8c4425ae086be1712a1cbb215bfb2ad19cd4e65c4b13e4ea08f0408d73"
        "8-x64-aspnet" => "6e1be0e3106914fe86ddc7eb7c7531bf79435edb44c293b5b2175089c1659dc2f9d313ce203e04f04b7849feb544d43568c74eae1f7e801dac9d742d93b7c6df"
        "9-arm-aspnet" => "416bf072c817abca07a3ec5e3527d8baf01f798c208a9091599a4d1826f3e9adb6f0b40bbbec597548e0715283cc166f5e9ff61836426c2de5c726b45f5fc8be"
        "9-arm64-aspnet" => "6322fc1a733a541f94e13db91cd27d976f55734689d40c3fdfbb10a057a575f7e02b32b1d4ab7c879cd599380fddd7e0a17d7f0ad0eb370db142f4f3c7eb5bdc"
        "9-x64-aspnet" => "13585a919350ba2257f00a90ac2de0306b1e952ebba0c7f9039d7ec8da13554b2e3c86add01db83de4e647009b8a3ac66c3a68629e7701b463703b79db86e4ac"
        "10-arm-aspnet" => "eb7ce0764cc88ba00bdc957b98b81105734da5964232996faeaa84e4f132b665c3177636a0a2794d2b7a01e37d963e92d59bbe6a6ee3717a01e8054d7440d48c"
        "10-arm64-aspnet" => "cdc179232b5688ef07993d7a78c5481f256f8cefe816fc913e38408fadec9b5f010a90628d6fd04d12e18ccc351b6252a566176154a111df6b6da14309aa0d41"
        "10-x64-aspnet" => "793e3a3c49c221e8543850858b273f6f20dfd81cd831525f34d6be2a1cee5494bad210c73cc072d947c93fc820ff2ad709b0a22462bf3fe2c923319e00784d19"
        _ => { bf write error $"Unsupported .NET download: ($filename)." }
    }

    # verify downloaded file
    bf write $" .. verifying ($filename) download." install/download
    { $"($hash)  ($filename_with_ext)" | ^sha512sum -c - } | bf handle -f {|code, err|
        bf write error $" .. checksum did not match for ($filename)." install/download
    } install/download

    # return filename with extension
    $filename_with_ext
}
